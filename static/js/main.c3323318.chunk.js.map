{"version":3,"sources":["thumb/ThumbState.ts","thumb/components/Controls.tsx","thumb/components/KrarkRow.tsx","thumb/components/KrarkTable.tsx","thumb/selectors.ts","thumb/functional.ts","thumb/components/Results.tsx","thumb/components/Thumb.tsx","thumb/action.ts","App.tsx","thumb/reducer.ts","reportWebVitals.ts","index.tsx"],"names":["Heads","Tails","repeat","n","f","Array","fill","map","_null","coinFlip","Math","random","performSimulation","state","coinFlips","numberOfKrarks","pow","numberOfThumbs","initialState","Controls","reset","setNumberOfKrarks","setNumberOfThumbs","onClick","number","setValue","Counter","max","KrarkRow","i","slice","KrarkTable","coinFlipsSelector","spellReturnsToHand","createSelector","filter","flips","flip","length","numberOfCastsIfFirstTailsIsPicked","values","fn","initialValue","result","forEach","value","foldl","cur","tailPicked","numberOfCopies","containsHeads","tailsPicked","copiesLowerBound","copiesUpperBound","Results","ThumbComponent","connect","dispatch","ownProps","type","store","createStore","action","console","log","getState","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3323318.chunk.js","sourcesContent":["export interface ThumbState {\n    numberOfKrarks: number\n    numberOfThumbs: number\n    coinFlips: CoinFlip[][]\n}\n\nexport const Heads = 'Heads'\nexport type Heads = typeof Heads\nexport const Tails = 'Tails'\nexport type Tails = typeof Tails\n\nexport type CoinFlip = Heads | Tails\n\n\n\nfunction repeat<T>(n: number, f: () => T): T[]{\n    return Array(n).fill(null).map(_null => f())\n}\n\nexport const coinFlip:  () => CoinFlip = () => Math.random() > 0.5 ? Heads : Tails\nexport const coinFlips: (n: number) => CoinFlip[] = n => repeat(n, coinFlip)\n\nexport function performSimulation(state: ThumbState): ThumbState {\n    return {\n        ...state,\n        coinFlips: repeat(state.numberOfKrarks, () => coinFlips(Math.pow(2, state.numberOfThumbs)))\n    }\n}\n\nexport const initialState: ThumbState = {\n    numberOfKrarks: 2,\n    numberOfThumbs: 0,\n    coinFlips: []\n}","import {Dispatch} from \"redux\";\nimport {Action} from \"../action\";\n\ninterface ControlProps {\n    numberOfKrarks: number\n    numberOfThumbs: number\n    performSimulation: () => void\n    reset: () => void\n    setNumberOfThumbs: (n: number) => void\n    setNumberOfKrarks: (n: number) => void\n}\n\n\nexport const Controls = ({performSimulation, reset, numberOfKrarks, setNumberOfKrarks, numberOfThumbs, setNumberOfThumbs}: ControlProps) => <div>\n    <button onClick={reset}>Reset</button>\n    <div>\n        <label>Number of Krarks</label>\n        <Counter number={numberOfKrarks} setValue={setNumberOfKrarks}/>\n    </div>\n    <div>\n        <label>Number of Thumbs</label>\n        <Counter number={numberOfThumbs} setValue={setNumberOfThumbs}/>\n    </div>\n    <button onClick={performSimulation}>Run</button>\n</div>\n\ninterface CounterProps {\n    number: number\n    setValue: (n: number) => void\n}\n\nconst Counter = ({number, setValue}: CounterProps) =>\n    <div>\n        <button onClick={() => setValue(Math.max(0, number - 1))}>-</button>\n        {number}\n        <button onClick={() => setValue(number + 1)}>+</button>\n    </div>\n\n","import {CoinFlip} from \"../ThumbState\";\n\ninterface KrarkRowProps {\n    coinFlips: CoinFlip[]\n}\n\nexport const KrarkRow = ({coinFlips}: KrarkRowProps) =>\n    <tr>\n        {\n            coinFlips.map((coinFlip, i) => <td key={i}>{coinFlip.slice(0,1)}</td>)\n        }\n    </tr>","import {CoinFlip} from \"../ThumbState\";\nimport {KrarkRow} from \"./KrarkRow\";\n\ninterface KrarkTableProps {\n    coinFlips: CoinFlip[][]\n}\n\nexport const KrarkTable = ({coinFlips}: KrarkTableProps) =>\n    <table>\n        <thead></thead>\n        <tbody>\n        {\n            coinFlips.map((coinFlips, i) => <KrarkRow key={i} coinFlips={coinFlips}/>)\n        }\n        </tbody>\n    </table>","import {createSelector} from \"reselect\";\nimport {Heads, Tails, ThumbState} from \"./ThumbState\"\nimport {foldl} from \"./functional\";\n\nconst coinFlipsSelector =  ({coinFlips}: ThumbState) => coinFlips\n\nexport const spellReturnsToHand = createSelector(coinFlipsSelector, coinFlips =>\n    coinFlips.filter(flips => flips.filter(flip => flip === Tails).length !== 0).length !== 0\n)\n\nexport const numberOfCastsIfFirstTailsIsPicked = createSelector(coinFlipsSelector, coinFlips => {\n    let [tailsPicked, result] = foldl(coinFlips,\n        ([tailPicked, numberOfCopies], cur) => {\n            const containsHeads = cur.filter(flip => flip == Heads).length !== 0\n            const containsTails = cur.filter(flip => flip == Tails).length !== 0\n            if(containsTails && !tailPicked) {\n                return [true, numberOfCopies];\n            } else if(containsHeads) {\n                return [tailPicked, numberOfCopies + 1];\n            } else {\n                return [tailPicked, numberOfCopies];\n            }\n\n        },\n        [false, 0]\n    )\n    return result + (tailsPicked ? 0 : 1);\n}\n)\n\nexport const copiesLowerBound = createSelector(coinFlipsSelector, coinFlips =>\n    coinFlips.filter(flips => flips.filter(flip => flip === Heads).length === flips.length).length\n)\n\nexport const copiesUpperBound = createSelector(coinFlipsSelector, coinFlips =>\n    coinFlips.filter(flips => flips.filter(flip => flip === Heads).length !== 0).length\n)\n\n","\n\nexport function foldl<ACC, VALUE>(values: VALUE[], fn: (acc: ACC,  cur: VALUE) => ACC, initialValue: ACC): ACC {\n    let result = initialValue;\n    values.forEach(value =>\n        result = fn(result, value)\n    )\n    return result;\n}","import {ThumbState} from \"../ThumbState\";\nimport {copiesLowerBound, copiesUpperBound, spellReturnsToHand, numberOfCastsIfFirstTailsIsPicked} from \"../selectors\";\n\ninterface ResultsProps {\n    state: ThumbState\n}\n\nexport const Results = ({state}: ResultsProps) => {\n    const {\n        numberOfThumbs,\n        numberOfKrarks,\n        coinFlips\n    } = state\n    return <div>\n\n        <table>\n            <thead></thead>\n            <tbody></tbody>\n            <tr>\n                <td>Spell returns to hand</td>\n                <td>{spellReturnsToHand(state) ? \"Yes\" : \"No\"}</td>\n            </tr>\n            <tr>\n                <td>Number of casts if first tails is picked</td>\n                <td>{numberOfCastsIfFirstTailsIsPicked(state)}</td>\n            </tr>\n            <tr>\n                <td>Amount of copies (at least)</td>\n                <td>{copiesLowerBound(state)}</td>\n            </tr>\n            <tr>\n                <td>Amount of copies (at most)</td>\n                <td>{copiesUpperBound(state)}</td>\n            </tr>\n\n        </table>\n    </div>\n}\n\n\n","import {Controls} from \"./Controls\";\nimport {ThumbState} from \"../ThumbState\";\nimport {Dispatch} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {Action, performSimulation, reset, setNumberOfKrarks, setNumberOfThumbs} from \"../action\";\nimport {KrarkTable} from \"./KrarkTable\";\nimport {Results} from \"./Results\";\n\ninterface ConnectedThumbProps {\n\n}\n\ninterface ThumbProps extends ConnectedThumbProps{\n    state: ThumbState\n}\n\nexport const Thumb = ({state, performSimulation, reset, setNumberOfThumbs, setNumberOfKrarks}: ThumbProps & DispatchProps) => <div>\n    <Controls\n        performSimulation={performSimulation}\n        reset = {reset}\n        numberOfKrarks={state.numberOfKrarks}\n        numberOfThumbs={state.numberOfThumbs}\n        setNumberOfKrarks={setNumberOfKrarks}\n        setNumberOfThumbs={setNumberOfThumbs}\n    />\n    {\n        state.coinFlips.length !== 0 ? <>\n            <Results state={state}/>\n            <KrarkTable coinFlips={state.coinFlips}/>\n        </> : null\n    }\n</div>\n\n\ninterface DispatchProps {\n    setNumberOfThumbs: (n: number) => void\n    setNumberOfKrarks: (n: number) => void\n    performSimulation: () => void\n    reset: () => void\n}\n\nfunction mapStateToProps(state: ThumbState): ThumbProps {\n    return {\n        state\n    }\n}\n\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: ThumbProps): DispatchProps {\n    return {\n        setNumberOfThumbs: (n: number) => dispatch(setNumberOfThumbs(n)),\n        setNumberOfKrarks: (n: number) => dispatch(setNumberOfKrarks(n)),\n        performSimulation: () => dispatch(performSimulation()),\n        reset: () => dispatch(reset())\n    }\n}\n\nexport const ThumbComponent = connect(mapStateToProps, mapDispatchToProps)(Thumb)","export type Action = SetNumberOfThumbs | SetNumberOfKrarks | PerformSimulation | Reset\n\n\nconst SetNumberOfKrarks = \"SetNumberOfKrarks\"\ntype SetNumberOfKrarks = {\n    type: typeof SetNumberOfKrarks,\n    value: number\n}\nexport function setNumberOfKrarks(value: number): SetNumberOfKrarks {\n    return {\n        type: SetNumberOfKrarks,\n        value\n    }\n}\n\n\nconst SetNumberOfThumbs = \"SetNumberOfThumbs\"\ntype SetNumberOfThumbs = {\n    type: typeof SetNumberOfThumbs\n    value: number\n}\nexport function setNumberOfThumbs(value: number): SetNumberOfThumbs {\n    return {\n        type: SetNumberOfThumbs,\n        value\n    }\n}\n\nconst PerformSimulation = \"PerformSimulation\"\ntype PerformSimulation = {\n    type: typeof PerformSimulation\n}\nexport function performSimulation(): PerformSimulation {\n    return {\n        type: PerformSimulation\n    }\n}\n\nconst Reset = \"Reset\"\ntype Reset = {\n    type: typeof Reset\n}\nexport function reset(): Reset {\n    return {\n        type: Reset\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {initialState, performSimulation} from \"./thumb/ThumbState\";\nimport {ThumbComponent} from \"./thumb/components/Thumb\";\nimport {createStore} from \"redux\";\nimport {reducer} from \"./thumb/reducer\";\nimport {Provider} from \"react-redux\";\n\nconst store = createStore(reducer, initialState)\n\nconsole.log(store.getState())\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div>\n        <ThumbComponent state={store.getState()}/>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import {initialState, performSimulation, ThumbState} from \"./ThumbState\";\nimport {Action} from \"./action\";\n\nexport function reducer(state: ThumbState = initialState, action: Action): ThumbState {\n    console.log('reducing', action)\n    switch(action.type){\n        case \"SetNumberOfKrarks\":\n            return {\n                ...state,\n                numberOfKrarks: action.value\n            }\n        case \"SetNumberOfThumbs\":\n            return {\n                ...state,\n                numberOfThumbs: action.value\n            }\n        case \"PerformSimulation\":\n            return performSimulation(state)\n        case \"Reset\":\n            return initialState\n    }\n    return state;\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}